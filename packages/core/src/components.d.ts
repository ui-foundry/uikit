/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface UkAlert {
        "heading"?: string;
        /**
          * @default 'success'
         */
        "type"?: 'info' | 'success' | 'warning' | 'danger';
    }
}
export interface UkAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUkAlertElement;
}
declare global {
    interface HTMLUkAlertElementEventMap {
        "closed": void;
    }
    interface HTMLUkAlertElement extends Components.UkAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUkAlertElementEventMap>(type: K, listener: (this: HTMLUkAlertElement, ev: UkAlertCustomEvent<HTMLUkAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUkAlertElementEventMap>(type: K, listener: (this: HTMLUkAlertElement, ev: UkAlertCustomEvent<HTMLUkAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUkAlertElement: {
        prototype: HTMLUkAlertElement;
        new (): HTMLUkAlertElement;
    };
    interface HTMLElementTagNameMap {
        "uk-alert": HTMLUkAlertElement;
    }
}
declare namespace LocalJSX {
    interface UkAlert {
        "heading"?: string;
        "onClosed"?: (event: UkAlertCustomEvent<void>) => void;
        /**
          * @default 'success'
         */
        "type"?: 'info' | 'success' | 'warning' | 'danger';
    }
    interface IntrinsicElements {
        "uk-alert": UkAlert;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "uk-alert": LocalJSX.UkAlert & JSXBase.HTMLAttributes<HTMLUkAlertElement>;
        }
    }
}
